//All arithmetics in seconds
//Edge cases handled
//Used technologies: stringstream(ground);
//                   getline() with custom delimeter;
//                   arithmetical rounding #62;      

#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <sstream>
using namespace std;

string secs_to_time(int seconds) {
    int time{100000000};
    time += ((seconds / 3600) % 24) * 1000000;
    time += ((seconds % 3600) / 60) * 1000;
    time += seconds % 60;

    string coc = to_string(time);
    coc.erase(coc.begin());//to handle single-digit fields
    coc[2] = ':';//these are zeroes
    coc[5] = ':';

    return (coc);
}

int main()
{
    //Input/////////////////////////////////////////////////////
    std::ios_base::sync_with_stdio(false);
	std::cin.tie(0);
	std::cout.tie(0);

    int ABC[9];
    ifstream input("input.txt", ios::in);
    string line;
    string token;
    stringstream buffer;

    for (size_t i = 0; getline(input, line); i++)
    {
        buffer << line;
        for (int j = i * 3; getline(buffer, token, ':'); j++) {
            ABC[j] = stoi(token);
        }
        buffer.clear();
    }

    //for (int i = 0; i < sizeof(ABC) / sizeof(ABC[0]); i++) {
    //    cout << ABC[i] << " ";
    //}

    //Main Logic/////////////////////////////////////////////////////
    
    //if (ABC[0] > ABC[6]) {
    //    ABC[6] += 24;
    //}

    int time_sent = ABC[0] * 3600 + ABC[1] * 60 + ABC[2],
        time_received = ABC[6] * 3600 + ABC[7] * 60 + ABC[8];

    if (time_sent > time_received) {
        time_received += 86400;
    }

    int true_time = ABC[3] * 3600 + ABC[4] * 60 + ABC[5],
        delay = (int)(((time_received - time_sent) / 2.0) + 0.5);

    //cout << time_sent << '\n' << time_received << '\n' << true_time << '\n' << delay << '\n';

    cout << secs_to_time(true_time + delay);
    

    //cout << '\n' << secs_to_time(time_received - time_sent) << '\n';
    //cout << secs_to_time((int)(((time_received - time_sent) / 2) + 0.5)) << '\n';

}
