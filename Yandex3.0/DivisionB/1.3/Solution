#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

unsigned int binarySearch(const std::vector<unsigned int>& v, unsigned int key) {

	int l = 0,
		r = v.size(),
		m = (l + r) / 2;

	while (r - l > 1)
	{
		if (v[m] <= key)
		{
			l = m;
		}
		else if (v[m] > key)
		{
			r = m;
		}
		m = (l + r) / 2;
	}
	if (v[l] < key)
	{
		return l+1;//+1 because index starts from 0
	}
	else
	{
		return l;
	}
}

int main()
{
    std::ios_base::sync_with_stdio(false);
	std::cin.tie(0);
	std::cout.tie(0);
    
    unsigned int stickers_amount, collectors_amount;
	std::vector<unsigned int> stickers_values, collector_min_value;

//input///////////////////////////////////////////////////////////
	std::cin >> stickers_amount;
    for (size_t i = 0; i < stickers_amount; i++)
	{
		unsigned int buff;
		std::cin >> buff;
		stickers_values.push_back(buff);
	}

	std::cin >> collectors_amount;
	for (size_t i = 0; i < collectors_amount; i++)
	{
		unsigned int buff;
		std::cin >> buff;
		collector_min_value.push_back(buff);
	}
//input///////////////////////////////////////////////////////////

	std::sort(stickers_values.begin(), stickers_values.end());
    stickers_values.erase( unique( stickers_values.begin(), stickers_values.end() ), stickers_values.end() );
	std::vector<int> ans;

	for (size_t i = 0; i < collectors_amount; i++)
	{
        //shortcuts///////////////////////////////////////////////////////////
		if (stickers_values[0] > collector_min_value[i])
		{
			ans.push_back(0);
		}
		else if (stickers_values[stickers_values.size() - 1] < collector_min_value[i])
		{
			ans.push_back(stickers_values.size());
		}
        //shortcuts///////////////////////////////////////////////////////////
		else
		{
			ans.push_back(binarySearch(stickers_values, collector_min_value[i]));
		}
	}
	
    for(auto& i:ans){
        cout<<i<<'\n';
    }
}   
